#!/bin/sh
RED="\e[31m"
GREEN="\e[32m"
NC="\e[0m"

all_c_like_files=()
all_prettier_files=()

while read -r file_path; do
  file_path="$(printf "${file_path}")"     # convert unicode numbers into carachters
  file_path="$(eval "echo ${file_path}")"  # remove quotation if exists
  echo "${file_path}" |
    grep -E '.(c|cc|cpp|hpp|h)$' >& /dev/null &&
    all_c_like_files+=(${file_path})
  echo "${file_path}" |
    grep -E '.(yml|yaml|json|js|css|html|md|mdx)$' >& /dev/null &&
    all_prettier_files+=(${file_path})
done < <(git diff --cached --diff-filter=d --name-only)
# echo "${all_files[@]}"; exit 0

if (( ${#all_c_like_files} )); then
  clang_format_exit_code=$?
fi

print_success() { echo -e "${GREEN}✔ $1 succeeded:${NC} Files are formatted [̲̅$̲̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅$̲̅]"; }
print_failure() { echo -e "${RED}❌ $1 failed:${NC} failed with code $2, ( ͡ಥ ͜ʖ ͡ಥ)"; }

if (( ${#all_c_like_files} )); then
  clang-format -i "${all_c_like_files[@]}"
  clang_format_exit_code=$?
  if (( $clang_format_exit_code )); then
    print_failure "clang-format" $clang_format_exit_code
    exit_code=1
  else
    print_success "clang-format"
  fi
fi

if (( ${#all_prettier_files} )); then
  prettier -v >& /dev/null
  if [ $? = 0 ]; then
    prettier -w "${all_prettier_files[@]}"
    prettier_exit_code=$?
    if (( $prettier_exit_code )); then
      print_failure "prettier" $prettier_exit_code
      exit_code=1
    else
      print_success "prettier"
    fi
  fi
fi

git add -f "${all_c_like_files[@]}"
git add -f "${all_prettier_files[@]}"

exit $exit_code
