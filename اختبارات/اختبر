#!/usr/bin/env python

import os
import re
import json
import yaml
import traceback
from os import path, sys
from مساعدات import run, is_equal, \
                    print_err, print_title, print_indented
try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper


__dirname__ = path.abspath(path.dirname(__file__))


def get_tests(tests_path, clean=False, fill=False):
    tests = []

    def get_one_test(file_name, full_path):
        name = re.compile(r'(.*)\.(?:ألف|alif)$').findall(file_name)
        if not name: return
        name = name[0]
        expect_file = None
        if not clean:
            expect_file = path.join(full_path, f"{name}_توقع.yml")
            expect_file = expect_file if path.exists(expect_file) else None
        if fill and expect_file:
            return
        code_file = path.join(full_path, file_name)
        return {
            "full_path": full_path,
            "tests": [{
                "name": name, "code_file": code_file,
                "expect_file": expect_file}]
        }

    if path.isdir(tests_path):
        tree = os.walk(tests_path)  # top-down tree
        for (full_path, dirs, files) in tree:
            full_path = path.abspath(full_path)
            alif_files = filter(lambda f: re.compile(
                r'.(ألف|alif)$').findall(f), files)
            for fname in alif_files:
                t = get_one_test(fname, full_path)
                t and tests.append(t)

            if dirs:
                for d in dirs:
                    sub_tests = get_tests(d)
                    tests.extend(sub_tests)
    else:
        fname = path.basename(tests_path)
        full_path = path.abspath(path.dirname(tests_path))
        t = get_one_test(fname, full_path)
        t and tests.append(t)

    return tests


def test_unit(tt, full_path, syntax_only=False):
    WRITE_SYMBOL         = "    \x1b[33m✎:\x1b[0m "    # yellow
    SUCCESS_WRITE_SYMBOL = "    \x1b[36m✔✎:\x1b[0m "  # cyan
    SUCCESS_SYMBOL       = "    \x1b[32m✔:\x1b[0m "   # green
    FAILURE_SYMBOL       = "    \x1b[31m✘:\x1b[0m "   # red
    SYNTAX_ONLY          = "<قواعد فقط>"

    name                 = tt.get('name')
    code_file            = tt.get("code_file")
    expect_file          = tt.get("expect_file")
    exec_file            = path.join(full_path, f"{name}_تنفيذي")
    log_file             = path.join(full_path, f"{name}_سجل")
    code_file_rel_path   = path.relpath(code_file, start=__dirname__)

    def dump_to_yaml(obj):
        return yaml.dump(obj, indent=4, Dumper=Dumper, default_flow_style=False, allow_unicode=True)

    def load_yaml(y):
        return yaml.load(y, Loader=Loader)

    def print_full_test_details_due_to_err(indent=" "*8):
        print_title(f"تفاصيل الخطأ", indent=indent, level=3)
        exception_str = "".join(traceback.format_exception(*sys.exc_info()))
        print_indented(exception_str, indent=indent)

        # is exec fle generated
        print_title(f"تفاصيل مترجم ألف", indent=indent, level=3)
        alif_details, alif_errors, rc = run("alif")
        if rc:
            print_indented(alif_errors, indent=indent)
        else:
            print_indented(alif_details, indent=indent)

        # is exec fle generated
        exec_file_rel_path = path.relpath(exec_file, start=__dirname__)
        print_title(
            f"هل انتج الملف التنفيذي ({exec_file_rel_path}):", indent=indent, level=3)
        print_indented(path.exists(exec_file), indent=indent)

        # print tt
        print_title("هذه هي تفاصلي الاختبار:", indent=indent, level=3)
        tt_str = dump_to_yaml(tt)
        print_indented(tt_str, indent=indent)

        # print content of `log_file`
        log_file_rel_path = path.relpath(log_file, start=__dirname__)
        print_title(f"ملف السجل ({log_file_rel_path}):",
                    indent=indent, level=3)
        if path.exists(log_file):
            with open(log_file, "r") as f:
                content = f.read()
                print_indented(content, indent=indent)
        else:
            print_indented("<غير موجود>", indent=indent)

        # print content of `expect_file`
        if expect_file:
            expect_file_rel_path = path.relpath(expect_file, start=__dirname__)
            print_title(
                f"ملف التوقع ({expect_file_rel_path}):", indent=indent, level=3)
            if expect_file and path.exists(expect_file):
                with open(expect_file, "r") as f:
                    content = f.read()
                    print_indented(content, indent=indent)
            else:
                print_indented("<غير موجود>", indent=indent)
        else:
            print_title(
                f"ملف التوقع:", indent=indent, level=3)
            print_indented("<غير موجود>", indent=indent)

    def do_test():
        nonlocal expect_file
        execs_stds = None
        execs_inputs = None
        compi_inputs = None
        if expect_file:
            with open(expect_file, "r") as f:
                expected_behaviour = load_yaml(f.read())
                compi_inputs = expected_behaviour.get('تجميع').get('دخل')
                expected_exec = expected_behaviour.get('تنفيذ')
                if expected_exec and expected_exec != SYNTAX_ONLY:
                    execs_inputs = map(lambda r: r.get('دخل'), expected_exec)
                if syntax_only:
                    expected_behaviour["تنفيذ"] = SYNTAX_ONLY

        syntax_only_arg = '--syntax-only' if syntax_only else ''
        compile_stdout, compile_stderr, compile_exitcode = \
            run(f'alif "{code_file}" {syntax_only_arg} --o "{exec_file}" --log-json "{log_file}"',
                inputs=compi_inputs)
        if not compile_exitcode and not syntax_only:
            execs_stds = \
                map(lambda i: (i, *run(f"'{exec_file}'", inputs=i)), execs_inputs) \
                if execs_inputs else [(None, *run(f"'{exec_file}'"))]

        logs = None
        if compile_exitcode:
            with open(log_file, "r") as f:
                logs = json.loads(f.read())

        real_behaviour = {
            "تنفيذ": [*map(lambda stds: {
                "رمز_الخروج": stds[3],
                "دخل": stds[0],
                "خرج": stds[1],
                "خطأ": stds[2]
            }, execs_stds)]
            if execs_stds else SYNTAX_ONLY
            if syntax_only else None,  # if no error occured
            "تجميع": {
                "رمز_الخروج": compile_exitcode,
                "دخل": compi_inputs,
                "خرج": compile_stdout,
                "خطأ": compile_stderr,
                "سجل": logs
            }
        }

        # compare expected and real behaviours and return the state
        # of the test:
        #   - if the expect_file doesn't exists, generate it and return
        #   - if a syntax-only test was done before (compilation state only known),
        #       and now a complete test is running, test the compilation only and
        #       change the execution state if only the test pass
        #   - otherwise compare both behaviours' exec and compi behaviours

        def print_failure_details(indent=" "*8):
            real_behaviour_str = dump_to_yaml(real_behaviour)
            expected_behaviour_str = dump_to_yaml(expected_behaviour)
            print_title("ما حدث فعلا", indent=indent, level=3)
            # put `indent` as intial indentation
            print_indented(real_behaviour_str, indent=indent)
            print_title("ما كان مُتوقعا", indent=indent, level=3)
            print_indented(expected_behaviour_str, indent=indent)

        if not expect_file:
            expect_file = path.join(full_path, f"{name}_توقع.yml")
            with open(expect_file, "w") as f:
                f.write(dump_to_yaml(real_behaviour))
            print(WRITE_SYMBOL, code_file_rel_path)
            return True
        elif not syntax_only and expected_behaviour.get("تنفيذ") == SYNTAX_ONLY:
            equal = is_equal(real_behaviour.get("ترجمة"),
                             expected_behaviour.get("ترجمة"))
            if equal:
                with open(expect_file, "w") as f:
                    f.write(dump_to_yaml(real_behaviour))
                print(SUCCESS_WRITE_SYMBOL + code_file_rel_path)
                return True
            else:
                print(FAILURE_SYMBOL + code_file_rel_path)
                print_failure_details()
                return False
        else:
            equal = is_equal(real_behaviour, expected_behaviour)
            if equal:
                print(SUCCESS_SYMBOL + code_file_rel_path)
                return True
            else:
                print(FAILURE_SYMBOL + code_file_rel_path)
                print_failure_details()
                return False

    try:
        return do_test()
    except (KeyboardInterrupt, SystemExit):
        exit(1)
    except:
        print(FAILURE_SYMBOL + code_file_rel_path)
        print_title("حدث خطأ غير متوقع", level=2)
        print_full_test_details_due_to_err()
        return False


def test_all(tests, syntax_only=False):
    if run("alif")[2]:
        print_err("مترجم ألف غير مثبت لديك، قم بالبناء أولا أو نزله مبنيا جاهزا")
        exit(1)

    some_failed = False

    for t in tests:
        full_path = t.get("full_path")
        for tt in t.get("tests"):
            passed = test_unit(tt, full_path, syntax_only)
            some_failed = some_failed or not passed

    if some_failed:
        print()
        print_title("قدر الله وما شاء فعل، بعض الاختبارات لم تنجح")
        exit(1)
    else:
        print()
        print_title("الحمد لله، تمت الاختبارات بنجاح 😁",
                    "سبحانك اللهم وبحمدك، نشهد أن لا إله إلا أنت، نستغفرك ونتوب إليك")


if __name__ == "__main__":
    def print_help():
        help_msg = """
الاستخدام: اجراء_الاختبارات [--مساعدة] [--تكميل] [--القواعد-فقط] [--تجديد]
                    [--مسار مسار]

إجراء اختبارات لمترجم ألف.

أَسْناد غير إلزامية:
    --مساعدة, -م          احصل على رسالة المساعدة هذه
    --تكميل, -ك           بانتاج ملفات التوقع الغير موجودة من خلال ما يحدث فعلا
                            عند ترجمة وتنفيذ الكود
    --القواعد-فقط, -ق     اختبار القواعد فقط بدون الخَرج أو الترجمة الكاملة
    --تجديد, -ج           إعادة انتاج كل التوقعات من الكود وإهمال القديم. هذه
                            الأمر لابد أن تكون واعيا بتبعاته
    --مسار مسار, -س مسار  تحديد مسار لجمع الاختبارات منه ومن المسارات الفرعية
                            بداخلة
"""
        print(help_msg)

    is_help = sys.argv.count("--مساعدة") > 0
    is_help = is_help or sys.argv.count("-م") > 0

    if is_help:
        print_help()
        exit(0)

    is_syntax_only = sys.argv.count("--القواعد-فقط") > 0
    is_syntax_only = is_syntax_only or sys.argv.count("-ق") > 0
    is_clean = sys.argv.count("--تجديد") > 0
    is_clean = is_clean or sys.argv.count("-ج") > 0
    is_fill = sys.argv.count("--تكميل") > 0
    is_fill = is_fill or sys.argv.count("-ك") > 0

    try:
        i = sys.argv.index("--مسار")
        tests_path = sys.argv[i+1]
    except:
        try:
            i = sys.argv.index("-س")
            tests_path = sys.argv[i+1]
        except:
            tests_path = path.join(__dirname__, "أكواد")

    if not path.exists(tests_path):
        print_err(f"المسار {tests_path} غير موجود")
        exit(1)

    tests = get_tests(tests_path, clean=is_clean, fill=is_fill)
    test_all(tests, syntax_only=is_syntax_only)
